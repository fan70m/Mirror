{"version":3,"sources":["webcam.js","components/Camera.js","App.js","serviceWorker.js","index.js"],"names":["Webcam","webcamElement","canvasElement","Object","classCallCheck","this","createClass","key","value","width","height","aspectRatio","_setup","asyncToGenerator","regenerator_default","a","mark","_callee2","_this","wrap","_context2","prev","next","abrupt","Promise","resolve","reject","undefined","navigator","mediaDevices","getUserMedia","audio","video","facingMode","then","mediaStream","srcObject","src","window","URL","createObjectURL","addEventListener","_callee","_context","adjustVideoSize","videoWidth","videoHeight","stop","apply","arguments","imageWidth","imageHeight","context","getContext","drawImage","_this2","_this$_drawImage","_drawImage","toBlob","blob","_ref2","length","type","quality","_this$_drawImage2","base64","toDataURL","Camera","possibleConstructorReturn","getPrototypeOf","call","webcam","document","createElement","getElementById","setup","catch","alert","react_default","autoPlay","id","style","position","right","bottom","minWidth","minHeight","zIndex","Component","App","state","offline","setState","offlineStatus","onLine","className","components_Camera","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","ReactDOM","render","src_App_0","process","origin","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4RAAaA,EAAb,WACE,SAAAA,EAAYC,EAAeC,GAAgBC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACzCK,KAAKJ,cAAgBA,EACrBI,KAAKH,cAAgBA,EAHzB,OAAAC,OAAAG,EAAA,EAAAH,CAAAH,EAAA,EAAAO,IAAA,kBAAAC,MAAA,SAMkBC,EAAOC,GACrB,IAAMC,EAAcF,EAAQC,EACxBD,GAASC,EACTL,KAAKJ,cAAcQ,MAAQE,EAAcN,KAAKJ,cAAcS,OAE5DL,KAAKJ,cAAcS,OAASL,KAAKJ,cAAcQ,MAAQE,IAX/D,CAAAJ,IAAA,QAAAC,MAAA,eAAAI,EAAAT,OAAAU,EAAA,EAAAV,CAAAW,EAAAC,EAAAC,KAAA,SAAAC,IAAA,IAAAC,EAAAb,KAAA,OAAAS,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,SAgBW,IAAIC,QAAQ,SAACC,EAASC,QACiBC,IAAxCC,UAAUC,aAAaC,aACzBF,UAAUC,aAAaC,aAAa,CAChCC,OAAO,EAAOC,MAAO,CAAEC,WAAY,UAElCC,KAAK,SAACC,GACC,cAAejB,EAAKjB,cACpBiB,EAAKjB,cAAcmC,UAAYD,EAG/BjB,EAAKjB,cAAcoC,IAAMC,OAAOC,IAAIC,gBAAgBL,GAExDjB,EAAKjB,cAAcwC,iBACf,aADJtC,OAAAU,EAAA,EAAAV,CAAAW,EAAAC,EAAAC,KAEI,SAAA0B,IAAA,OAAA5B,EAAAC,EAAAI,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,OACIJ,EAAK0B,gBACD1B,EAAKjB,cAAc4C,WACnB3B,EAAKjB,cAAc6C,aAEvBrB,IALJ,wBAAAkB,EAAAI,SAAAL,EAAArC,UAOA,KAIVqB,OAzCV,wBAAAN,EAAA2B,SAAA9B,EAAAZ,SAAA,yBAAAO,EAAAoC,MAAA3C,KAAA4C,YAAA,KAAA1C,IAAA,aAAAC,MAAA,WA8CI,IAAM0C,EAAa7C,KAAKJ,cAAc4C,WAChCM,EAAc9C,KAAKJ,cAAc6C,YAEjCM,EAAU/C,KAAKH,cAAcmD,WAAW,MAK9C,OAJAhD,KAAKH,cAAcO,MAAQyC,EAC3B7C,KAAKH,cAAcQ,OAASyC,EAE5BC,EAAQE,UAAUjD,KAAKJ,cAAe,EAAG,EAAGiD,EAAYC,GACjD,CAAEA,cAAaD,gBAtD1B,CAAA3C,IAAA,gBAAAC,MAAA,WAyDkB,IAAA+C,EAAAlD,KAAAmD,EACsBnD,KAAKoD,aAAjCP,EADMM,EACNN,WAAYC,EADNK,EACML,YACpB,OAAO,IAAI3B,QAAQ,SAACC,EAASC,GACzB6B,EAAKrD,cAAcwD,OAAO,SAACC,GACvBlC,EAAQ,CAAEkC,OAAMR,cAAaD,qBA7DzC,CAAA3C,IAAA,kBAAAC,MAAA,WAkEmE,IAAAoD,EAAAX,UAAAY,OAAA,QAAAlC,IAAAsB,UAAA,GAAAA,UAAA,GAA7B,CAAEa,KAAM,MAAOC,QAAS,GAA1CD,EAA+CF,EAA/CE,KAAMC,EAAyCH,EAAzCG,QAAyCC,EAC3B3D,KAAKoD,aAAjCN,EADuDa,EACvDb,YAAaD,EAD0Cc,EAC1Cd,WAErB,MAAO,CAAEe,OADM5D,KAAKH,cAAcgE,UAAU,SAAWJ,EAAMC,GAC5CZ,cAAaD,kBArElClD,EAAA,GCuCemE,cAnCb,SAAAA,IAAc,IAAAjD,EAAA,OAAAf,OAAAC,EAAA,EAAAD,CAAAE,KAAA8D,IACZjD,EAAAf,OAAAiE,EAAA,EAAAjE,CAAAE,KAAAF,OAAAkE,EAAA,EAAAlE,CAAAgE,GAAAG,KAAAjE,QACKkE,OAAS,KAFFrD,mFAOZb,KAAKH,cAAgBsE,SAASC,cAAc,UAC5CpE,KAAKkE,OAAS,IAAIvE,EACdwE,SAASE,eAAe,UACxBrE,KAAKH,eAETG,KAAKkE,OAAOI,QAAQC,MAAM,WACtBC,MAAM,0EAgBV,OACEC,EAAA/D,EAAA0D,cAAA,SAAOM,SAAS,OAAOC,GAAG,SAASC,MAZtB,CACbC,SAAU,QACVC,MAAO,IACPC,OAAQ,IACRC,SAAU,OACVC,UAAW,OACX7E,MAAO,OACPC,OAAQ,OACR6E,OAAQ,iBA3BOC,aCmCNC,cAjCb,SAAAA,IAAc,IAAAvE,EAAA,OAAAf,OAAAC,EAAA,EAAAD,CAAAE,KAAAoF,IACZvE,EAAAf,OAAAiE,EAAA,EAAAjE,CAAAE,KAAAF,OAAAkE,EAAA,EAAAlE,CAAAsF,GAAAnB,KAAAjE,QACKqF,MAAQ,CACXC,SAAS,GAHCzE,mFAOM,IAAAqC,EAAAlD,KAClBiC,OAAOG,iBAAiB,SAAU,WAChCc,EAAKqC,SAAS,CAAED,SAAS,MAG3BrD,OAAOG,iBAAiB,UAAW,WACjCc,EAAKqC,SAAS,CAAED,SAAS,mDAK3B,IAAIE,GAAiBjE,UAAUkE,OAC3BzF,KAAKqF,MAAMC,UAAYE,GACzBxF,KAAKuF,SAAS,CAAED,QAASE,qCAK3B,OACEf,EAAA/D,EAAA0D,cAAA,OAAKsB,UAAU,OACbjB,EAAA/D,EAAA0D,cAACuB,EAAD,cA5BUR,aCQZS,EAAcC,QACW,cAA7B5D,OAAO6D,SAASC,UAEe,UAA7B9D,OAAO6D,SAASC,UAEhB9D,OAAO6D,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9B5E,UAAU6E,cACPC,SAASH,GACTrE,KAAK,SAAAyE,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnB,QACf9D,UAAU6E,cAAcO,YAI1BC,QAAQC,IACN,gHAKEV,GAAUA,EAAOW,UACnBX,EAAOW,SAASR,KAMlBM,QAAQC,IAAI,sCAGRV,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUT,SAO5B/B,MAAM,SAAAyC,GACLJ,QAAQI,MAAM,4CAA6CA,KCtFjEC,IAASC,OAAOzC,EAAA/D,EAAA0D,cAAC+C,EAAD,MAAShD,SAASE,eAAe,SDe1C,SAAkB8B,GACvB,GAA6C,kBAAmB5E,UAAW,CAGzE,GADkB,IAAIW,IAAIkF,UAAwBnF,OAAO6D,UAC3CuB,SAAWpF,OAAO6D,SAASuB,OAIvC,OAGFpF,OAAOG,iBAAiB,OAAQ,WAC9B,IAAM8D,EAAK,GAAAoB,OAAMF,UAAN,sBAEPxB,GA6DV,SAAiCM,EAAOC,GAEtCoB,MAAMrB,GACHrE,KAAK,SAAA2F,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CrG,UAAU6E,cAAcyB,MAAMhG,KAAK,SAAAyE,GACjCA,EAAawB,aAAajG,KAAK,WAC7BI,OAAO6D,SAASiC,aAKpB9B,EAAgBC,EAAOC,KAG1B5B,MAAM,WACLqC,QAAQC,IACN,mEAjFAmB,CAAwB9B,EAAOC,GAI/B5E,UAAU6E,cAAcyB,MAAMhG,KAAK,WACjC+E,QAAQC,IACN,+GAMJZ,EAAgBC,EAAOC,MCtC/BC","file":"static/js/main.350df690.chunk.js","sourcesContent":["export class Webcam {\n  constructor(webcamElement, canvasElement) {\n    this.webcamElement = webcamElement;\n    this.canvasElement = canvasElement;\n  }\n\n  adjustVideoSize(width, height) {\n    const aspectRatio = width / height;\n    if (width >= height) {\n        this.webcamElement.width = aspectRatio * this.webcamElement.height;\n    } else  {\n        this.webcamElement.height = this.webcamElement.width / aspectRatio;\n    }\n  }\n\n  async setup() {\n    return new Promise((resolve, reject) => {\n      if (navigator.mediaDevices.getUserMedia !== undefined) {\n        navigator.mediaDevices.getUserMedia({\n            audio: false, video: { facingMode: 'user' }\n            })\n            .then((mediaStream) => {\n                if (\"srcObject\" in this.webcamElement) {\n                    this.webcamElement.srcObject = mediaStream;\n                } else {\n                    // For older browsers without the srcObject.\n                    this.webcamElement.src = window.URL.createObjectURL(mediaStream);\n                }\n                this.webcamElement.addEventListener(\n                    'loadeddata',\n                    async () => {\n                        this.adjustVideoSize(\n                            this.webcamElement.videoWidth,\n                            this.webcamElement.videoHeight\n                        );\n                        resolve();\n                    },\n                    false\n                );\n            });\n      } else {\n          reject();\n      }\n  });\n  }\n  _drawImage() {\n    const imageWidth = this.webcamElement.videoWidth;\n    const imageHeight = this.webcamElement.videoHeight;\n\n    const context = this.canvasElement.getContext('2d');\n    this.canvasElement.width = imageWidth;\n    this.canvasElement.height = imageHeight;\n\n    context.drawImage(this.webcamElement, 0, 0, imageWidth, imageHeight);\n    return { imageHeight, imageWidth };\n  }\n\n  takeBlobPhoto() {\n    const { imageWidth, imageHeight } = this._drawImage();\n    return new Promise((resolve, reject) => {\n        this.canvasElement.toBlob((blob) => {\n            resolve({ blob, imageHeight, imageWidth });\n        });\n    });\n  }\n\n  takeBase64Photo({ type, quality } = { type: 'png', quality: 1 }) {\n    const { imageHeight, imageWidth } = this._drawImage();\n    const base64 = this.canvasElement.toDataURL('image/' + type, quality);\n    return { base64, imageHeight, imageWidth };\n  }\n}\n","import React, { Component } from 'react';\nimport { Webcam } from '../webcam';\n\nclass Camera extends Component {\n  constructor() {\n    super();\n    this.webcam = null;\n  }\n\n  componentDidMount() {\n    // initialize the camera\n    this.canvasElement = document.createElement('canvas');\n    this.webcam = new Webcam(\n        document.getElementById('webcam'),\n        this.canvasElement\n    );\n    this.webcam.setup().catch(() => {\n        alert('Error getting access to your camera');\n    });\n  }\n\n  render() {\n    const webcam = {\n      position: \"fixed\",\n      right: \"0\",\n      bottom: \"0\",\n      minWidth: \"100%\",\n      minHeight: \"100%\",\n      width: \"auto\",\n      height: \"auto\",\n      zIndex: \"-100\",\n  };\n\n    return (\n      <video autoPlay=\"true\" id=\"webcam\" style={webcam} />\n    )\n  }\n}\n\nexport default Camera;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Camera from \"./components/Camera\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      offline: false\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('online', () => {\n      this.setState({ offline: false });\n    });\n\n    window.addEventListener('offline', () => {\n      this.setState({ offline: true });\n    });\n  }\n\n  componentDidUpdate() {\n    let offlineStatus = !navigator.onLine;\n    if (this.state.offline !== offlineStatus) {\n      this.setState({ offline: offlineStatus });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Camera/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import registerServiceWorker from './registerServiceWorker';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n// registerServiceWorker();\n"],"sourceRoot":""}